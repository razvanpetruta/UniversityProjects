N={letter,digit,non_zero_digit,sign,program,digit,digit_sequence,char_sequence,identifier,unsigned_int,int_const,string_const,const,statement_list,basic_type,vector_type,type,declaration,declaration_list,factor,term,expression,assignment_statement,io_statement,simple_statement,relation,condition,if_statement,while_statement,struct_statement,statement}
E={A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S,T,U,V,W,X,Y,Z,a,b,c,d,e,f,g,h,i,j,k,l,m,n,o,p,q,r,s,t,u,v,w,q,x,y,z,_,0,1,2,3,4,5,6,7,8,9,+,-,*,/,<=,<,==,!=,>=,=,>,[,],(,),{,},;,space, ,\n,newline,",',int,char,string,if,else,while,read,write,vector}
P={letter->A|letter->B|letter->C|letter->D|letter->E|letter->F|letter->G|letter->H|letter->I|letter->J|letter->K|letter->L|letter->M|letter->N|letter->O|letter->P|letter->Q|letter->R|letter->S|letter->T|letter->U|letter->V|letter->W|letter->X|letter->Y|letter->Z|letter->a|letter->b|letter->c|letter->d|letter->e|letter->f|letter->g|letter->h|letter->i|letter->j|letter->k|letter->l|letter->m|letter->n|letter->o|letter->p|letter->q|letter->r|letter->s|letter->t|letter->u|letter->v|letter->w|letter->x|letter->y|letter->z|digit->0|digit->1|digit->2|digit->3|digit->4|digit->5|digit->6|digit->7|digit->8|digit->9|non_zero_digit->1|non_zero_digit->2|non_zero_digit->3|non_zero_digit->4|non_zero_digit->5|non_zero_digit->6|non_zero_digit->7|non_zero_digit->8|non_zero_digit->9|char_sequence->letter char_sequence|char_sequence->digit char_sequence|char_sequence->_ char_sequence|identifier->letter|identifier->_|identifier->letter char_sequence|identifier->_ char_sequence|digit_sequence->digit digit_sequence|unsigned_int->non_zero_digit digit_sequence|unsigned_int->non_zero_digit|int_const->0|int_const->unsigned_int|int_const->sign unsigned_int|string_const->" char_sequence "|const->int_const|const->string_const|program->statement_list|basic_type->int|basic_type->char|basic_type->string|vector_type->vector < basic_type > [ unsigned_int ]|type->basic_type|type->vector_type|declaration->type identifier|declaration_list->declaration|declaration_list->declaration ; declaration_list|factor->expression|factor->identifier|factor->const|term->term * factor|term->term / factor|term->factor|expression->expression + term|expression->expression - term|expression->term|assignment_statement->identifier = expression|io_statement->read ( identifier )|io_statement->write ( identifier )|io_statement->write ( const )|simple_statement->assignment_statement|simple_statement->assignment_statement ;|simple_statement->io_statement|simple_statement->io_statement ;|simple_statement->declaration_list|simple_statement->declaration_list ;|relation-><=|relation->==|relation->!=|relation->>=|relation-><|relation->>|condition->expression relation expression|if_statement->if ( condition ) { statement_list }|if_statement->if ( condition ) { statement_list } else { statement_list }|while_statement->while ( condition ) { statement_list }|struct_statement->if_statement|struct_statement->while_statement|statement->simple_statement|statement->struct_statement|statement_list->statement|statement_list->statement statement_list}
S=program
